.TH WLC_SET_POINTER_BUTTON_CB 3 2016-04-22 WLC "WLC Core API Functions"

.SH NAME

wlc_set_pointer_button_cb, wlc_set_pointer_scroll_cb, wlc_set_pointer_motion_cb
\- mouse pointer events

.SH SYNOPSIS
.nf
.B #include <wlc/wlc.h>

.BI "void wlc_set_pointer_button_cb(bool (*"cb ")(wlc_handle "view ", uint32_t "time ,
.BI "                               const struct wlc_modifiers*, uint32_t "button ,
.B  "                               enum wlc_button_state, const struct wlc_point*));"
.BI "void wlc_set_pointer_scroll_cb(bool (*"cb ")(wlc_handle "view ", uint32_t "time ,
.BI "                               const struct wlc_modifiers*, uint8_t "axis_bits ,
.BI "                               double "amount[2] "));"
.BI "void wlc_set_pointer_motion_cb(bool (*"cb ")(wlc_handle "view ", uint32_t "time ,
.BI "                               const struct wlc_point*));"

.SH DESCRIPTION
The callback defined in
.I cb
when given to
.BR wlc_set_pointer_button_cb ()
is called on button events. These events are
.I WLC_BUTTON_STATE_PRESSED
and
.IR WLC_BUTTON_STATE_RELEASED .
The retuned
.I button
is a raw keycode and the representation depends on the operating system or
hardware.

Additional modifiers are set including led state.

The
.I axis_bits
provided to the callback
.I cb
in
.BR wlc_set_pointer_scroll_cb ()
can be used to determine the velocity of the mouse pointer by applying a
logical AND with the value and
.I WLC_SCROLL_AXIS_VERTICAL
or
.IR WLC_SCROLL_AXIS_HORIZONTAL .

The amount scrolled is stored in the
.I amount
array. The first element represents the vertical movement and the value stored
is the amount it has moved, negative values represent an upward scroll. For
horizontal scrolling the second element represents a leftward direction for
negative values and rightward for positive.

The
.I time
represents a timestamp of when the mouse event occured. It is a magical number
and cannot be relied on.

.SH RETURN VALUE
The return value of all callbacks dictate what is sent to the client. If
the callback returns
.I true
then the client doesn't see the event, if
.I false
the events fall through to the client.

.SH NOTES
The button codes and behaviour are currently mapped to onto
.I <linux/input.h>
and
.IR <libinput.h> .

.SH ALSO SEE
.BR wlc_init (3)
